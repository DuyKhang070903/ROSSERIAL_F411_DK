
test_kit_anh_vu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08005868  08005868  00006868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08005b38  08005b38  00006b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005b48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be8  2000006c  08005bb4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c54  08005bb4  00007c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc35  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260d  00000000  00000000  00016cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  000192e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077d  00000000  00000000  00019cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018108  00000000  00000000  0001a42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb26  00000000  00000000  00032535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8b1  00000000  00000000  0003e05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c990c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b3c  00000000  00000000  000c9950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cc48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005850 	.word	0x08005850

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08005850 	.word	0x08005850

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000506:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f91f 	bl	8000764 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 800052e:	b480      	push	{r7}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	b29b      	uxth	r3, r3
 8000542:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000546:	b29b      	uxth	r3, r3
 8000548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800054c:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8000554:	89fa      	ldrh	r2, [r7, #14]
 8000556:	429a      	cmp	r2, r3
 8000558:	d102      	bne.n	8000560 <_ZN14BufferedSerial4readEv+0x32>
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800055e:	e016      	b.n	800058e <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	b291      	uxth	r1, r2
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8000580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000584:	b29a      	uxth	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404

  return c;
 800058c:	68bb      	ldr	r3, [r7, #8]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005b6:	da25      	bge.n	8000604 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 80005be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4413      	add	r3, r2
 80005c6:	3304      	adds	r3, #4
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 f821 	bl	8005614 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	b29a      	uxth	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d921      	bls.n	800063a <_ZN14BufferedSerial5writeEPKhi+0xa0>
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
 8000602:	e01a      	b.n	800063a <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f800 	bl	8005614 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000620:	429a      	cmp	r2, r3
 8000622:	d905      	bls.n	8000630 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
    tx_head = length;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b29a      	uxth	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
  }

  // Send data:
  flush_tx_buffer();
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f000 f804 	bl	8000648 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00f      	beq.n	800067a <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000666:	429a      	cmp	r2, r3
 8000668:	d107      	bne.n	800067a <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
     tx_tail = 0;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b20      	cmp	r3, #32
 8000686:	d10b      	bne.n	80006a0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000694:	429a      	cmp	r2, r3
 8000696:	d003      	beq.n	80006a0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000698:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 80006a0:	2301      	movs	r3, #1
 80006a2:	e000      	b.n	80006a6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 80006a4:	2300      	movs	r3, #0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d156      	bne.n	8000758 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	@ 0x408
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 80006bc:	429a      	cmp	r2, r3
 80006be:	d103      	bne.n	80006c8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	@ 0x408
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d21c      	bcs.n	8000712 <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 80006f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	3304      	adds	r3, #4
 80006fc:	89ba      	ldrh	r2, [r7, #12]
 80006fe:	4619      	mov	r1, r3
 8000700:	f003 fd9e 	bl	8004240 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
 8000710:	e01e      	b.n	8000750 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	@ 0x40a
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 800072c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	3304      	adds	r3, #4
 8000736:	89fa      	ldrh	r2, [r7, #14]
 8000738:	4619      	mov	r1, r3
 800073a:	f003 fd81 	bl	8004240 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000744:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
    tx_tail = 0;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
  }

  mutex = false;
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e000      	b.n	800075a <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000758:	bf00      	nop
}
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000494 	.word	0x20000494

08000764 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3304      	adds	r3, #4
 8000774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000778:	4619      	mov	r1, r3
 800077a:	f003 fdd1 	bl	8004320 <HAL_UART_Receive_DMA>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <HAL_UART_TxCpltCallback+0x34>)
 80007ae:	f7ff ffea 	bl	8000786 <_ZN14BufferedSerial10get_handleEv>
 80007b2:	4603      	mov	r3, r0
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	429c      	cmp	r4, r3
 80007b8:	bf0c      	ite	eq
 80007ba:	2301      	moveq	r3, #1
 80007bc:	2300      	movne	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <HAL_UART_TxCpltCallback+0x34>)
 80007c6:	f7ff ff3f 	bl	8000648 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000088 	.word	0x20000088

080007d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <HAL_UART_RxCpltCallback+0x18>)
 80007e2:	f7ff ffbf 	bl	8000764 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000088 	.word	0x20000088

080007f4 <_Z41__static_initialization_and_destruction_0ii>:
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d108      	bne.n	8000816 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080a:	4293      	cmp	r3, r2
 800080c:	d103      	bne.n	8000816 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 800080e:	4904      	ldr	r1, [pc, #16]	@ (8000820 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000812:	f7ff fe61 	bl	80004d8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000498 	.word	0x20000498
 8000824:	20000088 	.word	0x20000088

08000828 <_GLOBAL__sub_I_buff_serial>:
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
 800082c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff ffdf 	bl	80007f4 <_Z41__static_initialization_and_destruction_0ii>
 8000836:	bd80      	pop	{r7, pc}

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f002 f8d0 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f80c 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f8c4 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000848:	f000 f89a 	bl	8000980 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800084c:	f000 f86e 	bl	800092c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000850:	f001 f940 	bl	8001ad4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000854:	f001 f954 	bl	8001b00 <loop>
 8000858:	e7fc      	b.n	8000854 <main+0x1c>
	...

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2230      	movs	r2, #48	@ 0x30
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fe9e 	bl	80055ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <SystemClock_Config+0xc8>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a26      	ldr	r2, [pc, #152]	@ (8000924 <SystemClock_Config+0xc8>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <SystemClock_Config+0xc8>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <SystemClock_Config+0xcc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a20      	ldr	r2, [pc, #128]	@ (8000928 <SystemClock_Config+0xcc>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <SystemClock_Config+0xcc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008d0:	23c0      	movs	r3, #192	@ 0xc0
 80008d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 ffc5 	bl	8003870 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ec:	f000 f8a6 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2103      	movs	r1, #3
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fa27 	bl	8003d60 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000918:	f000 f890 	bl	8000a3c <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_USART2_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USART2_UART_Init+0x4c>)
 8000964:	f003 fc1c 	bl	80041a0 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f865 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000498 	.word	0x20000498
 800097c:	40004400 	.word	0x40004400

08000980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_DMA_Init+0x4c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <MX_DMA_Init+0x4c>)
 8000990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <MX_DMA_Init+0x4c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2010      	movs	r0, #16
 80009a8:	f002 f98b 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009ac:	2010      	movs	r0, #16
 80009ae:	f002 f9a4 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2011      	movs	r0, #17
 80009b8:	f002 f983 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009bc:	2011      	movs	r0, #17
 80009be:	f002 f99c 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a16      	ldr	r2, [pc, #88]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <_ZN13STM32HardwareC1Ev+0x1c>)
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	20000088 	.word	0x20000088

08000a68 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd4f 	bl	8000518 <_ZN14BufferedSerial4initEv>
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd4d 	bl	800052e <_ZN14BufferedSerial4readEv>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd71 	bl	800059a <_ZN14BufferedSerial5writeEPKhi>
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	f001 fff0 	bl	8002aac <HAL_GetTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <_ZN3ros3MsgC1Ev+0x1c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	08005b00 	.word	0x08005b00

08000b18 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
      data()
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffe8 	bl	8000af8 <_ZN3ros3MsgC1Ev>
 8000b28:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffcf 	bl	8000ad6 <_ZN3ros4TimeC1Ev>
    {
    }
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	08005ae8 	.word	0x08005ae8

08000b48 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6859      	ldr	r1, [r3, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	0a19      	lsrs	r1, r3, #8
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	0c19      	lsrs	r1, r3, #16
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	b2ca      	uxtb	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	0e19      	lsrs	r1, r3, #24
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3303      	adds	r3, #3
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6899      	ldr	r1, [r3, #8]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	0a19      	lsrs	r1, r3, #8
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2ca      	uxtb	r2, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	0c19      	lsrs	r1, r3, #16
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	0e19      	lsrs	r1, r3, #24
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3303      	adds	r3, #3
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	b2ca      	uxtb	r2, r1
 8000be2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3304      	adds	r3, #4
 8000be8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000bea:	68fb      	ldr	r3, [r7, #12]
    }
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	6839      	ldr	r1, [r7, #0]
 8000c1e:	440b      	add	r3, r1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3302      	adds	r3, #2
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	440b      	add	r3, r1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3303      	adds	r3, #3
 8000c48:	6839      	ldr	r1, [r7, #0]
 8000c4a:	440b      	add	r3, r1
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	061b      	lsls	r3, r3, #24
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	6839      	ldr	r1, [r7, #0]
 8000c74:	440b      	add	r3, r1
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3302      	adds	r3, #2
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	431a      	orrs	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3303      	adds	r3, #3
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	440b      	add	r3, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	061b      	lsls	r3, r3, #24
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3304      	adds	r3, #4
 8000cb0:	60fb      	str	r3, [r7, #12]
     return offset;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    }
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	08005868 	.word	0x08005868

08000cdc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	08005878 	.word	0x08005878

08000cf8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fef8 	bl	8000af8 <_ZN3ros3MsgC1Ev>
 8000d08:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000d18:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000d1e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000d24:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
    {
    }
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08005ad0 	.word	0x08005ad0
 8000d3c:	0800589c 	.word	0x0800589c

08000d40 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	8899      	ldrh	r1, [r3, #4]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	889b      	ldrh	r3, [r3, #4]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b299      	uxth	r1, r3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	3301      	adds	r3, #1
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b2ca      	uxtb	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	3302      	adds	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fa2c 	bl	80001d8 <strlen>
 8000d80:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	69b9      	ldr	r1, [r7, #24]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fed2 	bl	8001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	3304      	adds	r3, #4
 8000d94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	18d0      	adds	r0, r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4619      	mov	r1, r3
 8000da4:	f004 fc36 	bl	8005614 <memcpy>
      offset += length_topic_name;
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4413      	add	r3, r2
 8000dae:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa0f 	bl	80001d8 <strlen>
 8000dba:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 feb5 	bl	8001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	18d0      	adds	r0, r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f004 fc19 	bl	8005614 <memcpy>
      offset += length_message_type;
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4413      	add	r3, r2
 8000de8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9f2 	bl	80001d8 <strlen>
 8000df4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	6939      	ldr	r1, [r7, #16]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fe98 	bl	8001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	3304      	adds	r3, #4
 8000e08:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	18d0      	adds	r0, r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4619      	mov	r1, r3
 8000e18:	f004 fbfc 	bl	8005614 <memcpy>
      offset += length_md5sum;
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4413      	add	r3, r2
 8000e22:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000e2a:	68f9      	ldr	r1, [r7, #12]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	0a19      	lsrs	r1, r3, #8
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	0c19      	lsrs	r1, r3, #16
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	0e19      	lsrs	r1, r3, #24
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000e6c:	69fb      	ldr	r3, [r7, #28]
    }
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b08a      	sub	sp, #40	@ 0x28
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	889b      	ldrh	r3, [r3, #4]
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	440b      	add	r3, r1
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	441a      	add	r2, r3
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fe55 	bl	8001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	3304      	adds	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed2:	e00b      	b.n	8000eec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	441a      	add	r2, r3
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	3b01      	subs	r3, #1
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3ed      	bcc.n	8000ed4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4413      	add	r3, r2
 8000efe:	3b01      	subs	r3, #1
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	441a      	add	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4413      	add	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	441a      	add	r2, r3
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fe22 	bl	8001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3304      	adds	r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	e00b      	b.n	8000f52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	441a      	add	r2, r3
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	440b      	add	r3, r1
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4413      	add	r3, r2
 8000f58:	6a3a      	ldr	r2, [r7, #32]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3ed      	bcc.n	8000f3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4413      	add	r3, r2
 8000f64:	3b01      	subs	r3, #1
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	441a      	add	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4413      	add	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	441a      	add	r2, r3
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fdef 	bl	8001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3304      	adds	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e00b      	b.n	8000fb8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	440b      	add	r3, r1
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3ed      	bcc.n	8000fa0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	441a      	add	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	6839      	ldr	r1, [r7, #0]
 8000ff2:	440a      	add	r2, r1
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	3301      	adds	r3, #1
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	440b      	add	r3, r1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4313      	orrs	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	3302      	adds	r3, #2
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440b      	add	r3, r1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	4313      	orrs	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	3303      	adds	r3, #3
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	440b      	add	r3, r1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	061b      	lsls	r3, r3, #24
 800102c:	4313      	orrs	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	3304      	adds	r3, #4
 800103a:	61bb      	str	r3, [r7, #24]
     return offset;
 800103c:	69bb      	ldr	r3, [r7, #24]
    }
 800103e:	4618      	mov	r0, r3
 8001040:	3728      	adds	r7, #40	@ 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	080058a0 	.word	0x080058a0

08001064 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	080058bc 	.word	0x080058bc

08001080 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fd34 	bl	8000af8 <_ZN3ros3MsgC1Ev>
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
      level(0),
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	711a      	strb	r2, [r3, #4]
      msg("")
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80010a0:	609a      	str	r2, [r3, #8]
    {
    }
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08005ab8 	.word	0x08005ab8
 80010b0:	0800589c 	.word	0x0800589c

080010b4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	7912      	ldrb	r2, [r2, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f87d 	bl	80001d8 <strlen>
 80010de:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fd23 	bl	8001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3304      	adds	r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	18d0      	adds	r0, r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	4619      	mov	r1, r3
 8001102:	f004 fa87 	bl	8005614 <memcpy>
      offset += length_msg;
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
      return offset;
 800110e:	68fb      	ldr	r3, [r7, #12]
    }
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3301      	adds	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	441a      	add	r2, r3
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fd14 	bl	8001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	3304      	adds	r3, #4
 800114e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00b      	b.n	800116e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	441a      	add	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3b01      	subs	r3, #1
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3ed      	bcc.n	8001156 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	3b01      	subs	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	3b01      	subs	r3, #1
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	441a      	add	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
     return offset;
 800119e:	693b      	ldr	r3, [r7, #16]
    }
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	080058e0 	.word	0x080058e0

080011c4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	080058f4 	.word	0x080058f4

080011e0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fc84 	bl	8000af8 <_ZN3ros3MsgC1Ev>
 80011f0:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08005aa0 	.word	0x08005aa0

0800123c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6859      	ldr	r1, [r3, #4]
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	0a19      	lsrs	r1, r3, #8
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	3301      	adds	r3, #1
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	0c19      	lsrs	r1, r3, #16
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	3302      	adds	r3, #2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	b2ca      	uxtb	r2, r1
 800127a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	0e19      	lsrs	r1, r3, #24
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	3303      	adds	r3, #3
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	3304      	adds	r3, #4
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	e02a      	b.n	80012f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2ca      	uxtb	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	0a19      	lsrs	r1, r3, #8
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	3301      	adds	r3, #1
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2ca      	uxtb	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	0c19      	lsrs	r1, r3, #16
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	3302      	adds	r3, #2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2ca      	uxtb	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	0e19      	lsrs	r1, r3, #24
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	3303      	adds	r3, #3
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	b2ca      	uxtb	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	3304      	adds	r3, #4
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	6a3a      	ldr	r2, [r7, #32]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3cf      	bcc.n	800129a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4413      	add	r3, r2
 8001304:	b2ca      	uxtb	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	0a19      	lsrs	r1, r3, #8
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	0c19      	lsrs	r1, r3, #16
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	0e19      	lsrs	r1, r3, #24
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	3303      	adds	r3, #3
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	b2ca      	uxtb	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	3304      	adds	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e02a      	b.n	80013a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4413      	add	r3, r2
 8001360:	b2ca      	uxtb	r2, r1
 8001362:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	0a19      	lsrs	r1, r3, #8
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	3301      	adds	r3, #1
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	b2ca      	uxtb	r2, r1
 8001372:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	0c19      	lsrs	r1, r3, #16
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	3302      	adds	r3, #2
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	0e19      	lsrs	r1, r3, #24
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	3303      	adds	r3, #3
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4413      	add	r3, r2
 8001390:	b2ca      	uxtb	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	3304      	adds	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3cf      	bcc.n	800134a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69d9      	ldr	r1, [r3, #28]
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	b2ca      	uxtb	r2, r1
 80013b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	0a19      	lsrs	r1, r3, #8
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	3301      	adds	r3, #1
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	0c19      	lsrs	r1, r3, #16
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	3302      	adds	r3, #2
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	b2ca      	uxtb	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	0e19      	lsrs	r1, r3, #24
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	3303      	adds	r3, #3
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	3304      	adds	r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	e027      	b.n	800144a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fee6 	bl	80001d8 <strlen>
 800140c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	4413      	add	r3, r2
 8001414:	6979      	ldr	r1, [r7, #20]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fb8c 	bl	8001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	3304      	adds	r3, #4
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	18d0      	adds	r0, r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4619      	mov	r1, r3
 8001438:	f004 f8ec 	bl	8005614 <memcpy>
      offset += length_stringsi;
 800143c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4413      	add	r3, r2
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	3301      	adds	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3d2      	bcc.n	80013fa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001456:	4618      	mov	r0, r3
 8001458:	3728      	adds	r7, #40	@ 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800145e:	b580      	push	{r7, lr}
 8001460:	b08e      	sub	sp, #56	@ 0x38
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800146c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001478:	3301      	adds	r3, #1
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	4313      	orrs	r3, r2
 8001486:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800148a:	3302      	adds	r3, #2
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	6a3a      	ldr	r2, [r7, #32]
 8001496:	4313      	orrs	r3, r2
 8001498:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800149a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800149c:	3303      	adds	r3, #3
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	6a3a      	ldr	r2, [r7, #32]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80014ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ae:	3304      	adds	r3, #4
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d90a      	bls.n	80014d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4619      	mov	r1, r3
 80014c6:	4610      	mov	r0, r2
 80014c8:	f004 f83a 	bl	8005540 <realloc>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a3a      	ldr	r2, [r7, #32]
 80014d6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
 80014dc:	e035      	b.n	800154a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	440a      	add	r2, r1
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f4:	3301      	adds	r3, #1
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	440b      	add	r3, r1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	4313      	orrs	r3, r2
 8001500:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001506:	3302      	adds	r3, #2
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	440b      	add	r3, r1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001518:	3303      	adds	r3, #3
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	440b      	add	r3, r1
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4313      	orrs	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800152c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800152e:	3304      	adds	r3, #4
 8001530:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001546:	3301      	adds	r3, #1
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001550:	429a      	cmp	r2, r3
 8001552:	d3c4      	bcc.n	80014de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800155e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001560:	3301      	adds	r3, #1
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	4313      	orrs	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001572:	3302      	adds	r3, #2
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	4313      	orrs	r3, r2
 8001580:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001584:	3303      	adds	r3, #3
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4313      	orrs	r3, r2
 8001592:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001596:	3304      	adds	r3, #4
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d90a      	bls.n	80015ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f003 ffc6 	bl	8005540 <realloc>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c4:	e035      	b.n	8001632 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015dc:	3301      	adds	r3, #1
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	440b      	add	r3, r1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	3302      	adds	r3, #2
 80015f0:	6839      	ldr	r1, [r7, #0]
 80015f2:	440b      	add	r3, r1
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001600:	3303      	adds	r3, #3
 8001602:	6839      	ldr	r1, [r7, #0]
 8001604:	440b      	add	r3, r1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001616:	3304      	adds	r3, #4
 8001618:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	3214      	adds	r2, #20
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	3301      	adds	r3, #1
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001638:	429a      	cmp	r2, r3
 800163a:	d3c4      	bcc.n	80015c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001648:	3301      	adds	r3, #1
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800165a:	3302      	adds	r3, #2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800166a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800166c:	3303      	adds	r3, #3
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	3304      	adds	r3, #4
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	429a      	cmp	r2, r3
 800168a:	d90a      	bls.n	80016a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4619      	mov	r1, r3
 8001696:	4610      	mov	r0, r2
 8001698:	f003 ff52 	bl	8005540 <realloc>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ac:	e03e      	b.n	800172c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80016ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	441a      	add	r2, r3
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fa59 	bl	8001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016c2:	3304      	adds	r3, #4
 80016c4:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80016c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ca:	e00b      	b.n	80016e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	441a      	add	r2, r3
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	3b01      	subs	r3, #1
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	440b      	add	r3, r1
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3ed      	bcc.n	80016cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80016f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	3b01      	subs	r3, #1
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001702:	3b01      	subs	r3, #1
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	441a      	add	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800170c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	3220      	adds	r2, #32
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001728:	3301      	adds	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001732:	429a      	cmp	r2, r3
 8001734:	d3bb      	bcc.n	80016ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001738:	4618      	mov	r0, r3
 800173a:	3738      	adds	r7, #56	@ 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	080059f4 	.word	0x080059f4

0800175c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	08005918 	.word	0x08005918

08001778 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68d8      	ldr	r0, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6891      	ldr	r1, [r2, #8]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	4798      	blx	r3
 80017c4:	4603      	mov	r3, r0
  };
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
  }
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f980 	bl	8000af8 <_ZN3ros3MsgC1Ev>
 80017f8:	4a03      	ldr	r2, [pc, #12]	@ (8001808 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
    }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	08005a5c 	.word	0x08005a5c

0800180c <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
      return offset;
 800181a:	68fb      	ldr	r3, [r7, #12]
    }
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
     return offset;
 8001836:	68fb      	ldr	r3, [r7, #12]
    }
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	0800593c 	.word	0x0800593c

08001860 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	0800594c 	.word	0x0800594c

0800187c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
      data("")
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f936 	bl	8000af8 <_ZN3ros3MsgC1Ev>
 800188c:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_ZN8std_msgs6StringC1Ev+0x28>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001896:	605a      	str	r2, [r3, #4]
    {
    }
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08005a44 	.word	0x08005a44
 80018a8:	0800589c 	.word	0x0800589c

080018ac <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fc8a 	bl	80001d8 <strlen>
 80018c4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f930 	bl	8001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3304      	adds	r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	18d0      	adds	r0, r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4619      	mov	r1, r3
 80018e8:	f003 fe94 	bl	8005614 <memcpy>
      offset += length_data;
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
      return offset;
 80018f4:	68fb      	ldr	r3, [r7, #12]
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	441a      	add	r2, r3
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f92a 	bl	8001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	3304      	adds	r3, #4
 8001922:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00b      	b.n	8001942 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	441a      	add	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	440b      	add	r3, r1
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3ed      	bcc.n	800192a <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	3b01      	subs	r3, #1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	3b01      	subs	r3, #1
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
     return offset;
 8001972:	693b      	ldr	r3, [r7, #16]
    }
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	08005970 	.word	0x08005970

08001998 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	08005980 	.word	0x08005980

080019b4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	08005a8c 	.word	0x08005a8c

080019d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffe8 	bl	80019b4 <_ZN3ros15NodeHandleBase_C1Ev>
 80019e4:	4a33      	ldr	r2, [pc, #204]	@ (8001ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f82a 	bl	8000a48 <_ZN13STM32HardwareC1Ev>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3318      	adds	r3, #24
 8001a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fdc8 	bl	80055ac <memset>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fdbf 	bl	80055ac <memset>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8001a34:	2264      	movs	r2, #100	@ 0x64
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fdb7 	bl	80055ac <memset>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8001a44:	2264      	movs	r2, #100	@ 0x64
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fdaf 	bl	80055ac <memset>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb9b 	bl	80011e0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	08005a30 	.word	0x08005a30

08001ab8 <_Z6led_cbRKN8std_msgs5EmptyE>:
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

// Subscriber:
void led_cb(const std_msgs::Empty &msg) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <_Z6led_cbRKN8std_msgs5EmptyE+0x18>)
 8001ac4:	f001 feba 	bl	800383c <HAL_GPIO_TogglePin>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <setup>:
ros::Subscriber<std_msgs::Empty> led_sub("toggle_led", &led_cb);

// Setup node:
void setup(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  nh.initNode();
 8001ad8:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <setup+0x20>)
 8001ada:	f000 f8a5 	bl	8001c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8001ade:	4906      	ldr	r1, [pc, #24]	@ (8001af8 <setup+0x24>)
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <setup+0x20>)
 8001ae2:	f000 f8be 	bl	8001c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(led_sub);
 8001ae6:	4905      	ldr	r1, [pc, #20]	@ (8001afc <setup+0x28>)
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <setup+0x20>)
 8001aea:	f000 f8e8 	bl	8001cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200005a0 	.word	0x200005a0
 8001af8:	20000ad8 	.word	0x20000ad8
 8001afc:	20000aec 	.word	0x20000aec

08001b00 <loop>:

// Loop:
void loop(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  // Publish message:
  str_msg.data = hello;
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <loop+0x24>)
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <loop+0x28>)
 8001b08:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001b0a:	4906      	ldr	r1, [pc, #24]	@ (8001b24 <loop+0x24>)
 8001b0c:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <loop+0x2c>)
 8001b0e:	f7ff fe4a 	bl	80017a6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  nh.spinOnce();
 8001b12:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <loop+0x30>)
 8001b14:	f000 f900 	bl	8001d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(500);
 8001b18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b1c:	f000 ffd2 	bl	8002ac4 <HAL_Delay>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000ad0 	.word	0x20000ad0
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000ad8 	.word	0x20000ad8
 8001b30:	200005a0 	.word	0x200005a0

08001b34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e00c      	b.n	8001b5e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	fa22 f103 	lsr.w	r1, r2, r3
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d9ef      	bls.n	8001b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e010      	b.n	8001baa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	440a      	add	r2, r1
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	00d2      	lsls	r2, r2, #3
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d9eb      	bls.n	8001b88 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	08005a74 	.word	0x08005a74

08001be0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffe5 	bl	8001bc0 <_ZN3ros11Subscriber_C1Ev>
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	330c      	adds	r3, #12
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fdf1 	bl	80017e8 <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	615a      	str	r2, [r3, #20]
  {
    topic_ = topic_name;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]
  };
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	08005a18 	.word	0x08005a18

08001c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe ff17 	bl	8000a68 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e01b      	b.n	8001caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8001c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d110      	bne.n	8001ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	60da      	str	r2, [r3, #12]
        return true;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e006      	b.n	8001cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b18      	cmp	r3, #24
 8001cae:	dde0      	ble.n	8001c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001cb0:	2300      	movs	r3, #0
  }
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e01a      	b.n	8001d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10e      	bne.n	8001cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
        return true;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e006      	b.n	8001d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b18      	cmp	r3, #24
 8001d08:	dde1      	ble.n	8001cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8001d0a:	2300      	movs	r3, #0
  }
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fecb 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 8001d2a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d903      	bls.n	8001d46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d903      	bls.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fea5 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad2      	subs	r2, r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	bf8c      	ite	hi
 8001d84:	2301      	movhi	r3, #1
 8001d86:	2300      	movls	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8001d8e:	f06f 0301 	mvn.w	r3, #1
 8001d92:	e190      	b.n	80020b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fe72 	bl	8000a82 <_ZN13STM32Hardware4readEv>
 8001d9e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f2c0 8170 	blt.w	8002088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	441a      	add	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001dbe:	2b07      	cmp	r3, #7
 8001dc0:	d11d      	bne.n	8001dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8001dc8:	1c59      	adds	r1, r3, #1
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	b2d1      	uxtb	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	460a      	mov	r2, r1
 8001dda:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1b7      	bne.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2208      	movs	r2, #8
 8001df8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001dfc:	e7b2      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d128      	bne.n	8001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2bff      	cmp	r3, #255	@ 0xff
 8001e0c:	d10d      	bne.n	8001e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f103 0214 	add.w	r2, r3, #20
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8001e28:	e79c      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fe46 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	bf8c      	ite	hi
 8001e42:	2301      	movhi	r3, #1
 8001e44:	2300      	movls	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d08b      	beq.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8001e54:	f06f 0301 	mvn.w	r3, #1
 8001e58:	e12d      	b.n	80020b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d118      	bne.n	8001e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e68:	d107      	bne.n	8001e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001e78:	e774      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f af6b 	bne.w	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f915 	bl	80020be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001e94:	e766      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d113      	bne.n	8001ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8001ec6:	e74d      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d110      	bne.n	8001ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	441a      	add	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001ef2:	e737      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d116      	bne.n	8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8001f04:	425a      	negs	r2, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	bf58      	it	pl
 8001f0c:	4253      	negpl	r3, r2
 8001f0e:	2bff      	cmp	r3, #255	@ 0xff
 8001f10:	d107      	bne.n	8001f22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001f20:	e720      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001f2a:	e71b      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d10f      	bne.n	8001f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8001f54:	e706      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001f5c:	2b06      	cmp	r3, #6
 8001f5e:	d117      	bne.n	8001f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2207      	movs	r2, #7
 8001f76:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f aeef 	bne.w	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8001f8e:	e6e9      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	f47f aee4 	bne.w	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8001faa:	425a      	negs	r2, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	bf58      	it	pl
 8001fb2:	4253      	negpl	r3, r2
 8001fb4:	2bff      	cmp	r3, #255	@ 0xff
 8001fb6:	f47f aed5 	bne.w	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d110      	bne.n	8001fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f87a 	bl	80020be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f894 	bl	80020f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fe4:	e067      	b.n	80020b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	d106      	bne.n	8001ffe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f95e 	bl	80022b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001ffc:	e6b2      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8002004:	2b06      	cmp	r3, #6
 8002006:	d10d      	bne.n	8002024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3318      	adds	r3, #24
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f7ff fa22 	bl	800145e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8002022:	e69f      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800202a:	2b0b      	cmp	r3, #11
 800202c:	d104      	bne.n	8002038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8002036:	e695      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800203e:	3b64      	subs	r3, #100	@ 0x64
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f43f ae89 	beq.w	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8002058:	3b64      	subs	r3, #100	@ 0x64
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	6858      	ldr	r0, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800206c:	3b64      	subs	r3, #100	@ 0x64
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	3218      	adds	r2, #24
 8002082:	4611      	mov	r1, r2
 8002084:	4798      	blx	r3
    while (true)
 8002086:	e66d      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002088:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00f      	beq.n	80020b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d906      	bls.n	80020b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f809 	bl	80020be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 80020b4:	2300      	movs	r3, #0
  }
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fd24 	bl	8000b18 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	210a      	movs	r1, #10
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
    rt_time = hardware_.time();
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fceb 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
  }
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b08b      	sub	sp, #44	@ 0x2c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fdf7 	bl	8000cf8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	e05a      	b.n	80021c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002114:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d04f      	beq.n	80021c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002124:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	b29b      	uxth	r3, r3
 8002130:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002136:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800213a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002146:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002154:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3308      	adds	r3, #8
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4608      	mov	r0, r1
 8002166:	4798      	blx	r3
 8002168:	4603      	mov	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002170:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4608      	mov	r0, r1
 8002190:	4798      	blx	r3
 8002192:	4603      	mov	r3, r0
 8002194:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800219a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681c      	ldr	r4, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a6:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80021aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fb0d 	bl	80017ce <_ZN3ros9Publisher15getEndpointTypeEv>
 80021b4:	4601      	mov	r1, r0
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	461a      	mov	r2, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	2b18      	cmp	r3, #24
 80021ca:	dda1      	ble.n	8002110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d0:	e067      	b.n	80022a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05b      	beq.n	800229c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3308      	adds	r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4608      	mov	r0, r1
 800222e:	4798      	blx	r3
 8002230:	4603      	mov	r3, r0
 8002232:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	330c      	adds	r3, #12
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4608      	mov	r0, r1
 8002258:	4798      	blx	r3
 800225a:	4603      	mov	r3, r0
 800225c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800225e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002262:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681c      	ldr	r4, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4608      	mov	r0, r1
 800228e:	4798      	blx	r3
 8002290:	4601      	mov	r1, r0
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	461a      	mov	r2, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3301      	adds	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	2b18      	cmp	r3, #24
 80022a6:	dd94      	ble.n	80021d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 80022b0:	bf00      	nop
 80022b2:	372c      	adds	r7, #44	@ 0x2c
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd90      	pop	{r4, r7, pc}

080022b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fc26 	bl	8000b18 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fbf5 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 80022d6:	4602      	mov	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fc86 	bl	8000bf8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4914      	ldr	r1, [pc, #80]	@ (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80022f2:	fba1 1303 	umull	r1, r3, r1, r3
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	4413      	add	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80022fc:	6939      	ldr	r1, [r7, #16]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002302:	fba3 0302 	umull	r0, r3, r3, r2
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800230c:	fb00 f303 	mul.w	r3, r0, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	440b      	add	r3, r1
 800231a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	3304      	adds	r3, #4
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8a5 	bl	8002474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fbc6 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 8002334:	4602      	mov	r2, r0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	10624dd3 	.word	0x10624dd3
 8002348:	000f4240 	.word	0x000f4240

0800234c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b63      	cmp	r3, #99	@ 0x63
 800235c:	dd09      	ble.n	8002372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e079      	b.n	8002466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 800237e:	3207      	adds	r2, #7
 8002380:	4611      	mov	r1, r2
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	22ff      	movs	r2, #255	@ 0xff
 800238c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	22fe      	movs	r2, #254	@ 0xfe
 8002394:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 80023be:	4413      	add	r3, r2
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	121b      	asrs	r3, r3, #8
 80023dc:	b21b      	sxth	r3, r3
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80023ea:	2305      	movs	r3, #5
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e00c      	b.n	800240a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	3301      	adds	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3306      	adds	r3, #6
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	429a      	cmp	r2, r3
 8002412:	dded      	ble.n	80023f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3307      	adds	r3, #7
 8002418:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	425a      	negs	r2, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	bf58      	it	pl
 8002424:	4253      	negpl	r3, r2
 8002426:	b2da      	uxtb	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	6179      	str	r1, [r7, #20]
 800242e:	43d2      	mvns	r2, r2
 8002430:	b2d1      	uxtb	r1, r2
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	460a      	mov	r2, r1
 8002438:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002442:	dc0a      	bgt.n	800245a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1d18      	adds	r0, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fb24 	bl	8000a9e <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	e005      	b.n	8002466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800245a:	4905      	ldr	r1, [pc, #20]	@ (8002470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f847 	bl	80024f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	080059a4 	.word	0x080059a4

08002474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fb1c 	bl	8000ac0 <_ZN13STM32Hardware4timeEv>
 8002488:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4914      	ldr	r1, [pc, #80]	@ (80024e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8002492:	fba1 1303 	umull	r1, r3, r1, r3
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80024a8:	fba3 0302 	umull	r0, r3, r3, r2
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	1aca      	subs	r2, r1, r3
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80024c2:	4413      	add	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f103 020c 	add.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3310      	adds	r3, #16
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f000 fa2d 	bl	8002934 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	10624dd3 	.word	0x10624dd3
 80024e8:	000f4240 	.word	0x000f4240
 80024ec:	3b9aca00 	.word	0x3b9aca00

080024f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	2103      	movs	r1, #3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f804 	bl	800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	460b      	mov	r3, r1
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fdae 	bl	8001080 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f107 0214 	add.w	r2, r7, #20
 8002536:	2107      	movs	r1, #7
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	4798      	blx	r3
  }
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_Z41__static_initialization_and_destruction_0ii>:
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d116      	bne.n	8002582 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800255a:	4293      	cmp	r3, r2
 800255c:	d111      	bne.n	8002582 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800255e:	480b      	ldr	r0, [pc, #44]	@ (800258c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002560:	f7ff fa38 	bl	80019d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002564:	480a      	ldr	r0, [pc, #40]	@ (8002590 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002566:	f7ff f989 	bl	800187c <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800256a:	2300      	movs	r3, #0
 800256c:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800256e:	4909      	ldr	r1, [pc, #36]	@ (8002594 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002570:	4809      	ldr	r0, [pc, #36]	@ (8002598 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002572:	f7ff f901 	bl	8001778 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Empty> led_sub("toggle_led", &led_cb);
 8002576:	2301      	movs	r3, #1
 8002578:	4a08      	ldr	r2, [pc, #32]	@ (800259c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800257a:	4909      	ldr	r1, [pc, #36]	@ (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800257c:	4809      	ldr	r0, [pc, #36]	@ (80025a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800257e:	f7ff fb2f 	bl	8001be0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200005a0 	.word	0x200005a0
 8002590:	20000ad0 	.word	0x20000ad0
 8002594:	080059e0 	.word	0x080059e0
 8002598:	20000ad8 	.word	0x20000ad8
 800259c:	08001ab9 	.word	0x08001ab9
 80025a0:	080059e8 	.word	0x080059e8
 80025a4:	20000aec 	.word	0x20000aec

080025a8 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	330c      	adds	r3, #12
 80025b6:	6839      	ldr	r1, [r7, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f935 	bl	8001828 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	320c      	adds	r2, #12
 80025c6:	4610      	mov	r0, r2
 80025c8:	4798      	blx	r3
  }
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
  }
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	330c      	adds	r3, #12
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f924 	bl	8001844 <_ZN8std_msgs5Empty7getTypeEv>
 80025fc:	4603      	mov	r3, r0
  }
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	330c      	adds	r3, #12
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f924 	bl	8001860 <_ZN8std_msgs5Empty6getMD5Ev>
 8002618:	4603      	mov	r3, r0
  }
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
    return configured_;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_GLOBAL__sub_I_nh>:
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
 8002640:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002644:	2001      	movs	r0, #1
 8002646:	f7ff ff7d 	bl	8002544 <_Z41__static_initialization_and_destruction_0ii>
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <HAL_MspInit+0x4c>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_MspInit+0x4c>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a08      	ldr	r2, [pc, #32]	@ (8002698 <HAL_MspInit+0x4c>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_MspInit+0x4c>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268a:	2007      	movs	r0, #7
 800268c:	f000 fb0e 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <HAL_UART_MspInit+0x150>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	f040 8092 	bne.w	80027e4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <HAL_UART_MspInit+0x154>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	4a49      	ldr	r2, [pc, #292]	@ (80027f0 <HAL_UART_MspInit+0x154>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d0:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_UART_MspInit+0x154>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_UART_MspInit+0x154>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	4a42      	ldr	r2, [pc, #264]	@ (80027f0 <HAL_UART_MspInit+0x154>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ec:	4b40      	ldr	r3, [pc, #256]	@ (80027f0 <HAL_UART_MspInit+0x154>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f8:	230c      	movs	r3, #12
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002708:	2307      	movs	r3, #7
 800270a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	4838      	ldr	r0, [pc, #224]	@ (80027f4 <HAL_UART_MspInit+0x158>)
 8002714:	f000 ff0e 	bl	8003534 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002718:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 800271a:	4a38      	ldr	r2, [pc, #224]	@ (80027fc <HAL_UART_MspInit+0x160>)
 800271c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800271e:	4b36      	ldr	r3, [pc, #216]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002720:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002724:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002726:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272c:	4b32      	ldr	r3, [pc, #200]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002732:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002738:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273a:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002746:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800274c:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 800274e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002752:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800275a:	4827      	ldr	r0, [pc, #156]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 800275c:	f000 fae8 	bl	8002d30 <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002766:	f7fe f969 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a22      	ldr	r2, [pc, #136]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 800276e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002770:	4a21      	ldr	r2, [pc, #132]	@ (80027f8 <HAL_UART_MspInit+0x15c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002776:	4b22      	ldr	r3, [pc, #136]	@ (8002800 <HAL_UART_MspInit+0x164>)
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_UART_MspInit+0x168>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800277c:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <HAL_UART_MspInit+0x164>)
 800277e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002782:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <HAL_UART_MspInit+0x164>)
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <HAL_UART_MspInit+0x164>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <HAL_UART_MspInit+0x164>)
 8002792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002796:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_UART_MspInit+0x164>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279e:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027a4:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b2:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027b8:	4811      	ldr	r0, [pc, #68]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027ba:	f000 fab9 	bl	8002d30 <HAL_DMA_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80027c4:	f7fe f93a 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80027ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <HAL_UART_MspInit+0x164>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2026      	movs	r0, #38	@ 0x26
 80027da:	f000 fa72 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027de:	2026      	movs	r0, #38	@ 0x26
 80027e0:	f000 fa8b 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	@ 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40004400 	.word	0x40004400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	200004e0 	.word	0x200004e0
 80027fc:	40026088 	.word	0x40026088
 8002800:	20000540 	.word	0x20000540
 8002804:	400260a0 	.word	0x400260a0

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <NMI_Handler+0x4>

08002810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <HardFault_Handler+0x4>

08002818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <MemManage_Handler+0x4>

08002820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <BusFault_Handler+0x4>

08002828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <UsageFault_Handler+0x4>

08002830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285e:	f000 f911 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <DMA1_Stream5_IRQHandler+0x10>)
 800286e:	f000 fbf7 	bl	8003060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200004e0 	.word	0x200004e0

0800287c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002880:	4802      	ldr	r0, [pc, #8]	@ (800288c <DMA1_Stream6_IRQHandler+0x10>)
 8002882:	f000 fbed 	bl	8003060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000540 	.word	0x20000540

08002890 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002894:	4802      	ldr	r0, [pc, #8]	@ (80028a0 <USART2_IRQHandler+0x10>)
 8002896:	f001 fd69 	bl	800436c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000498 	.word	0x20000498

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f002 fe72 	bl	80055bc <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	@ (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20020000 	.word	0x20020000
 8002904:	00000400 	.word	0x00000400
 8002908:	20000b04 	.word	0x20000b04
 800290c:	20000c58 	.word	0x20000c58

08002910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0a5a      	lsrs	r2, r3, #9
 8002944:	490f      	ldr	r1, [pc, #60]	@ (8002984 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002946:	fba1 1202 	umull	r1, r2, r1, r2
 800294a:	09d2      	lsrs	r2, r2, #7
 800294c:	490e      	ldr	r1, [pc, #56]	@ (8002988 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800294e:	fb01 f202 	mul.w	r2, r1, r2
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0a5b      	lsrs	r3, r3, #9
 800295c:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	09db      	lsrs	r3, r3, #7
 8002964:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	00044b83 	.word	0x00044b83
 8002988:	3b9aca00 	.word	0x3b9aca00

0800298c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800298c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002990:	f7ff ffbe 	bl	8002910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002994:	480c      	ldr	r0, [pc, #48]	@ (80029c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002996:	490d      	ldr	r1, [pc, #52]	@ (80029cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002998:	4a0d      	ldr	r2, [pc, #52]	@ (80029d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029ac:	4c0a      	ldr	r4, [pc, #40]	@ (80029d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ba:	f002 fe05 	bl	80055c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029be:	f7fd ff3b 	bl	8000838 <main>
  bx  lr    
 80029c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80029d0:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 80029d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80029d8:	20000c54 	.word	0x20000c54

080029dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <HAL_Init+0x40>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_Init+0x40>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029fc:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a07      	ldr	r2, [pc, #28]	@ (8002a20 <HAL_Init+0x40>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f94f 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 f808 	bl	8002a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a14:	f7ff fe1a 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a2c:	4b12      	ldr	r3, [pc, #72]	@ (8002a78 <HAL_InitTick+0x54>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <HAL_InitTick+0x58>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f967 	bl	8002d16 <HAL_SYSTICK_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00e      	b.n	8002a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d80a      	bhi.n	8002a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a60:	f000 f92f 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a64:	4a06      	ldr	r2, [pc, #24]	@ (8002a80 <HAL_InitTick+0x5c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000010 	.word	0x20000010
 8002a7c:	20000018 	.word	0x20000018
 8002a80:	20000014 	.word	0x20000014

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000018 	.word	0x20000018
 8002aa8:	20000b08 	.word	0x20000b08

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000b08 	.word	0x20000b08

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000018 	.word	0x20000018

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	@ (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	@ (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	@ (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff feb6 	bl	8002aac <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e099      	b.n	8002e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6c:	e00f      	b.n	8002d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d6e:	f7ff fe9d 	bl	8002aac <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d908      	bls.n	8002d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e078      	b.n	8002e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e8      	bne.n	8002d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <HAL_DMA_Init+0x158>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	4313      	orrs	r3, r2
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0307 	bic.w	r3, r3, #7
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d117      	bne.n	8002e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fb01 	bl	800343c <DMA_CheckFifoParam>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2240      	movs	r2, #64	@ 0x40
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e016      	b.n	8002e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fab8 	bl	80033d0 <DMA_CalcBaseAndBitshift>
 8002e60:	4603      	mov	r3, r0
 8002e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	223f      	movs	r2, #63	@ 0x3f
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	f010803f 	.word	0xf010803f

08002e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x26>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e040      	b.n	8002f34 <HAL_DMA_Start_IT+0xa8>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d12f      	bne.n	8002f26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa4a 	bl	8003374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	223f      	movs	r2, #63	@ 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0216 	orr.w	r2, r2, #22
 8002efa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0208 	orr.w	r2, r2, #8
 8002f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e005      	b.n	8002f32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f4a:	f7ff fdaf 	bl	8002aac <HAL_GetTick>
 8002f4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d008      	beq.n	8002f6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2280      	movs	r2, #128	@ 0x80
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e052      	b.n	8003014 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0216 	bic.w	r2, r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_DMA_Abort+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0208 	bic.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbe:	e013      	b.n	8002fe8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc0:	f7ff fd74 	bl	8002aac <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d90c      	bls.n	8002fe8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e015      	b.n	8003014 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e4      	bne.n	8002fc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	223f      	movs	r2, #63	@ 0x3f
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2280      	movs	r2, #128	@ 0x80
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00c      	b.n	8003054 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2205      	movs	r2, #5
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800306c:	4b8e      	ldr	r3, [pc, #568]	@ (80032a8 <HAL_DMA_IRQHandler+0x248>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a8e      	ldr	r2, [pc, #568]	@ (80032ac <HAL_DMA_IRQHandler+0x24c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	2208      	movs	r2, #8
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01a      	beq.n	80030cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0204 	bic.w	r2, r2, #4
 80030b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	2208      	movs	r2, #8
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	2201      	movs	r2, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ee:	2201      	movs	r2, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	2204      	movs	r2, #4
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	2204      	movs	r2, #4
 8003126:	409a      	lsls	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	2210      	movs	r2, #16
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d043      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03c      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	2210      	movs	r2, #16
 800315c:	409a      	lsls	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d018      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d024      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
 800318e:	e01f      	b.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e016      	b.n	80031d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0208 	bic.w	r2, r2, #8
 80031be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	2220      	movs	r2, #32
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 808f 	beq.w	8003300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8087 	beq.w	8003300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	2220      	movs	r2, #32
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b05      	cmp	r3, #5
 8003208:	d136      	bne.n	8003278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0216 	bic.w	r2, r2, #22
 8003218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_DMA_IRQHandler+0x1da>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	223f      	movs	r2, #63	@ 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07e      	beq.n	800336c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
        }
        return;
 8003276:	e079      	b.n	800336c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	2b00      	cmp	r3, #0
 800329a:	d031      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e02c      	b.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
 80032a6:	bf00      	nop
 80032a8:	20000010 	.word	0x20000010
 80032ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e01e      	b.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003304:	2b00      	cmp	r3, #0
 8003306:	d032      	beq.n	800336e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d022      	beq.n	800335a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3301      	adds	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	429a      	cmp	r2, r3
 8003336:	d307      	bcc.n	8003348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f2      	bne.n	800332c <HAL_DMA_IRQHandler+0x2cc>
 8003346:	e000      	b.n	800334a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e000      	b.n	800336e <HAL_DMA_IRQHandler+0x30e>
        return;
 800336c:	bf00      	nop
    }
  }
}
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d108      	bne.n	80033b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033b2:	e007      	b.n	80033c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3b10      	subs	r3, #16
 80033e0:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <DMA_CalcBaseAndBitshift+0x64>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ea:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <DMA_CalcBaseAndBitshift+0x68>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d909      	bls.n	8003412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003410:	e007      	b.n	8003422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	aaaaaaab 	.word	0xaaaaaaab
 8003438:	08005b28 	.word	0x08005b28

0800343c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11f      	bne.n	8003496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d856      	bhi.n	800350a <DMA_CheckFifoParam+0xce>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <DMA_CheckFifoParam+0x28>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003475 	.word	0x08003475
 8003468:	08003487 	.word	0x08003487
 800346c:	08003475 	.word	0x08003475
 8003470:	0800350b 	.word	0x0800350b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d046      	beq.n	800350e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003484:	e043      	b.n	800350e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800348e:	d140      	bne.n	8003512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003494:	e03d      	b.n	8003512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349e:	d121      	bne.n	80034e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d837      	bhi.n	8003516 <DMA_CheckFifoParam+0xda>
 80034a6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ac <DMA_CheckFifoParam+0x70>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034c3 	.word	0x080034c3
 80034b4:	080034bd 	.word	0x080034bd
 80034b8:	080034d5 	.word	0x080034d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      break;
 80034c0:	e030      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d025      	beq.n	800351a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d2:	e022      	b.n	800351a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034dc:	d11f      	bne.n	800351e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034e2:	e01c      	b.n	800351e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d903      	bls.n	80034f2 <DMA_CheckFifoParam+0xb6>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d003      	beq.n	80034f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034f0:	e018      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
      break;
 80034f6:	e015      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e00b      	b.n	8003522 <DMA_CheckFifoParam+0xe6>
      break;
 800350a:	bf00      	nop
 800350c:	e00a      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e008      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
 8003514:	e006      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
 8003518:	e004      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;   
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 8003522:	bf00      	nop
    }
  } 
  
  return status; 
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	@ 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	e159      	b.n	8003804 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	f040 8148 	bne.w	80037fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d005      	beq.n	8003586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	2b02      	cmp	r3, #2
 8003584:	d130      	bne.n	80035e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 0201 	and.w	r2, r3, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d017      	beq.n	8003624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d123      	bne.n	8003678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a2 	beq.w	80037fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4b57      	ldr	r3, [pc, #348]	@ (800381c <HAL_GPIO_Init+0x2e8>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	4a56      	ldr	r2, [pc, #344]	@ (800381c <HAL_GPIO_Init+0x2e8>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ca:	4b54      	ldr	r3, [pc, #336]	@ (800381c <HAL_GPIO_Init+0x2e8>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036d6:	4a52      	ldr	r2, [pc, #328]	@ (8003820 <HAL_GPIO_Init+0x2ec>)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a49      	ldr	r2, [pc, #292]	@ (8003824 <HAL_GPIO_Init+0x2f0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d019      	beq.n	8003736 <HAL_GPIO_Init+0x202>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a48      	ldr	r2, [pc, #288]	@ (8003828 <HAL_GPIO_Init+0x2f4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0x1fe>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a47      	ldr	r2, [pc, #284]	@ (800382c <HAL_GPIO_Init+0x2f8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_GPIO_Init+0x1fa>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a46      	ldr	r2, [pc, #280]	@ (8003830 <HAL_GPIO_Init+0x2fc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_GPIO_Init+0x1f6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a45      	ldr	r2, [pc, #276]	@ (8003834 <HAL_GPIO_Init+0x300>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_GPIO_Init+0x1f2>
 8003722:	2304      	movs	r3, #4
 8003724:	e008      	b.n	8003738 <HAL_GPIO_Init+0x204>
 8003726:	2307      	movs	r3, #7
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x204>
 800372a:	2303      	movs	r3, #3
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x204>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x204>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x204>
 8003736:	2300      	movs	r3, #0
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003748:	4935      	ldr	r1, [pc, #212]	@ (8003820 <HAL_GPIO_Init+0x2ec>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003756:	4b38      	ldr	r3, [pc, #224]	@ (8003838 <HAL_GPIO_Init+0x304>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377a:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <HAL_GPIO_Init+0x304>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003780:	4b2d      	ldr	r3, [pc, #180]	@ (8003838 <HAL_GPIO_Init+0x304>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a4:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <HAL_GPIO_Init+0x304>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037aa:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <HAL_GPIO_Init+0x304>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003838 <HAL_GPIO_Init+0x304>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d4:	4b18      	ldr	r3, [pc, #96]	@ (8003838 <HAL_GPIO_Init+0x304>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003838 <HAL_GPIO_Init+0x304>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	f67f aea2 	bls.w	8003550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3724      	adds	r7, #36	@ 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	40013800 	.word	0x40013800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000
 8003838:	40013c00 	.word	0x40013c00

0800383c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	041a      	lsls	r2, r3, #16
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43d9      	mvns	r1, r3
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	400b      	ands	r3, r1
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e267      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d075      	beq.n	800397a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388e:	4b88      	ldr	r3, [pc, #544]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d00c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b85      	ldr	r3, [pc, #532]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d112      	bne.n	80038cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a6:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b2:	d10b      	bne.n	80038cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05b      	beq.n	8003978 <HAL_RCC_OscConfig+0x108>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d157      	bne.n	8003978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e242      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x74>
 80038d6:	4b76      	ldr	r3, [pc, #472]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a75      	ldr	r2, [pc, #468]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e01d      	b.n	8003920 <HAL_RCC_OscConfig+0xb0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x98>
 80038ee:	4b70      	ldr	r3, [pc, #448]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6f      	ldr	r2, [pc, #444]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0xb0>
 8003908:	4b69      	ldr	r3, [pc, #420]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a68      	ldr	r2, [pc, #416]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b66      	ldr	r3, [pc, #408]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a65      	ldr	r2, [pc, #404]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7ff f8c0 	bl	8002aac <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7ff f8bc 	bl	8002aac <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	@ 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e207      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0xc0>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7ff f8ac 	bl	8002aac <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7ff f8a8 	bl	8002aac <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e1f3      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	4b51      	ldr	r3, [pc, #324]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0xe8>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d063      	beq.n	8003a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003992:	4b47      	ldr	r3, [pc, #284]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d11c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399e:	4b44      	ldr	r3, [pc, #272]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d116      	bne.n	80039d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	4b41      	ldr	r3, [pc, #260]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_RCC_OscConfig+0x152>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e1c7      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4937      	ldr	r1, [pc, #220]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d6:	e03a      	b.n	8003a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e0:	4b34      	ldr	r3, [pc, #208]	@ (8003ab4 <HAL_RCC_OscConfig+0x244>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7ff f861 	bl	8002aac <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ee:	f7ff f85d 	bl	8002aac <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1a8      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a00:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	4b28      	ldr	r3, [pc, #160]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4925      	ldr	r1, [pc, #148]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_RCC_OscConfig+0x244>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7ff f840 	bl	8002aac <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a30:	f7ff f83c 	bl	8002aac <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e187      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a42:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d036      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <HAL_RCC_OscConfig+0x248>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7ff f820 	bl	8002aac <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a70:	f7ff f81c 	bl	8002aac <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e167      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a82:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x200>
 8003a8e:	e01b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <HAL_RCC_OscConfig+0x248>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a96:	f7ff f809 	bl	8002aac <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9c:	e00e      	b.n	8003abc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7ff f805 	bl	8002aac <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d907      	bls.n	8003abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e150      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	42470000 	.word	0x42470000
 8003ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	4b88      	ldr	r3, [pc, #544]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ea      	bne.n	8003a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8097 	beq.w	8003c04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ada:	4b81      	ldr	r3, [pc, #516]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003af6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b77      	ldr	r3, [pc, #476]	@ (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d118      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b12:	4b74      	ldr	r3, [pc, #464]	@ (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a73      	ldr	r2, [pc, #460]	@ (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe ffc5 	bl	8002aac <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b26:	f7fe ffc1 	bl	8002aac <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e10c      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x2ea>
 8003b4c:	4b64      	ldr	r3, [pc, #400]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a63      	ldr	r2, [pc, #396]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	e01c      	b.n	8003b94 <HAL_RCC_OscConfig+0x324>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x30c>
 8003b62:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0x324>
 8003b7c:	4b58      	ldr	r3, [pc, #352]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	4a57      	ldr	r2, [pc, #348]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b88:	4b55      	ldr	r3, [pc, #340]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	4a54      	ldr	r2, [pc, #336]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe ff86 	bl	8002aac <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fe ff82 	bl	8002aac <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0cb      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	4b49      	ldr	r3, [pc, #292]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ee      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x334>
 8003bc6:	e014      	b.n	8003bf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe ff70 	bl	8002aac <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fe ff6c 	bl	8002aac <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0b5      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ee      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf8:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	4a38      	ldr	r2, [pc, #224]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a1 	beq.w	8003d50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d05c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d141      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c22:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_RCC_OscConfig+0x478>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe ff40 	bl	8002aac <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe ff3c 	bl	8002aac <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e087      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	3b01      	subs	r3, #1
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	491b      	ldr	r1, [pc, #108]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <HAL_RCC_OscConfig+0x478>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe ff15 	bl	8002aac <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe ff11 	bl	8002aac <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e05c      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c98:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x416>
 8003ca4:	e054      	b.n	8003d50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fefe 	bl	8002aac <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fefa 	bl	8002aac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e045      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x444>
 8003cd2:	e03d      	b.n	8003d50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e038      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cec:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x4ec>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d028      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d121      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d11a      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d111      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	3b01      	subs	r3, #1
 8003d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800

08003d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0cc      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d74:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d90c      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b65      	ldr	r3, [pc, #404]	@ (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b63      	ldr	r3, [pc, #396]	@ (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0b8      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b59      	ldr	r3, [pc, #356]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a58      	ldr	r2, [pc, #352]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b53      	ldr	r3, [pc, #332]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b50      	ldr	r3, [pc, #320]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	494d      	ldr	r1, [pc, #308]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d044      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d119      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e067      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b37      	ldr	r3, [pc, #220]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4934      	ldr	r1, [pc, #208]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e50:	f7fe fe2c 	bl	8002aac <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fe fe28 	bl	8002aac <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e04f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b25      	ldr	r3, [pc, #148]	@ (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d20c      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b22      	ldr	r3, [pc, #136]	@ (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4916      	ldr	r1, [pc, #88]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	490e      	ldr	r1, [pc, #56]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ee6:	f000 f821 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	490a      	ldr	r1, [pc, #40]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	5ccb      	ldrb	r3, [r1, r3]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f02:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fd8c 	bl	8002a24 <HAL_InitTick>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08005b10 	.word	0x08005b10
 8003f24:	20000010 	.word	0x20000010
 8003f28:	20000014 	.word	0x20000014

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b094      	sub	sp, #80	@ 0x50
 8003f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f44:	4b79      	ldr	r3, [pc, #484]	@ (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x40>
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	f200 80e1 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f5e:	e0db      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b73      	ldr	r3, [pc, #460]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f62:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003f64:	e0db      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f66:	4b73      	ldr	r3, [pc, #460]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f6a:	e0d8      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f74:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f76:	4b6d      	ldr	r3, [pc, #436]	@ (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d063      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b6a      	ldr	r3, [pc, #424]	@ (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	0159      	lsls	r1, r3, #5
 8003fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb0:	0150      	lsls	r0, r2, #5
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	1a51      	subs	r1, r2, r1
 8003fba:	6139      	str	r1, [r7, #16]
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	018b      	lsls	r3, r1, #6
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fda:	4651      	mov	r1, sl
 8003fdc:	018a      	lsls	r2, r1, #6
 8003fde:	4651      	mov	r1, sl
 8003fe0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ffe:	4690      	mov	r8, r2
 8004000:	4699      	mov	r9, r3
 8004002:	4623      	mov	r3, r4
 8004004:	eb18 0303 	adds.w	r3, r8, r3
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	462b      	mov	r3, r5
 800400c:	eb49 0303 	adc.w	r3, r9, r3
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800401e:	4629      	mov	r1, r5
 8004020:	024b      	lsls	r3, r1, #9
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004028:	4621      	mov	r1, r4
 800402a:	024a      	lsls	r2, r1, #9
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004032:	2200      	movs	r2, #0
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800403c:	f7fc f8d4 	bl	80001e8 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4613      	mov	r3, r2
 8004046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004048:	e058      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404a:	4b38      	ldr	r3, [pc, #224]	@ (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	2200      	movs	r2, #0
 8004052:	4618      	mov	r0, r3
 8004054:	4611      	mov	r1, r2
 8004056:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004060:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	f04f 0000 	mov.w	r0, #0
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	0159      	lsls	r1, r3, #5
 8004072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004076:	0150      	lsls	r0, r2, #5
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4641      	mov	r1, r8
 800407e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004082:	4649      	mov	r1, r9
 8004084:	eb63 0b01 	sbc.w	fp, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004094:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004098:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800409c:	ebb2 040a 	subs.w	r4, r2, sl
 80040a0:	eb63 050b 	sbc.w	r5, r3, fp
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	00eb      	lsls	r3, r5, #3
 80040ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b2:	00e2      	lsls	r2, r4, #3
 80040b4:	4614      	mov	r4, r2
 80040b6:	461d      	mov	r5, r3
 80040b8:	4643      	mov	r3, r8
 80040ba:	18e3      	adds	r3, r4, r3
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	464b      	mov	r3, r9
 80040c0:	eb45 0303 	adc.w	r3, r5, r3
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d2:	4629      	mov	r1, r5
 80040d4:	028b      	lsls	r3, r1, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040dc:	4621      	mov	r1, r4
 80040de:	028a      	lsls	r2, r1, #10
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e6:	2200      	movs	r2, #0
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	61fa      	str	r2, [r7, #28]
 80040ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f0:	f7fc f87a 	bl	80001e8 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800410c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800410e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x204>)
 800411a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004120:	4618      	mov	r0, r3
 8004122:	3750      	adds	r7, #80	@ 0x50
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200

08004138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b03      	ldr	r3, [pc, #12]	@ (800414c <HAL_RCC_GetHCLKFreq+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000010 	.word	0x20000010

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff0 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0a9b      	lsrs	r3, r3, #10
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	@ (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	08005b20 	.word	0x08005b20

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800417c:	f7ff ffdc 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0b5b      	lsrs	r3, r3, #13
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	@ (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	08005b20 	.word	0x08005b20

080041a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e042      	b.n	8004238 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fa68 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 ff37 	bl	8005058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	@ 0x30
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b20      	cmp	r3, #32
 8004258:	d156      	bne.n	8004308 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_UART_Transmit_DMA+0x26>
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e04f      	b.n	800430a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2221      	movs	r2, #33	@ 0x21
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_UART_Transmit_DMA+0xd4>)
 8004290:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	4a20      	ldr	r2, [pc, #128]	@ (8004318 <HAL_UART_Transmit_DMA+0xd8>)
 8004298:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <HAL_UART_Transmit_DMA+0xdc>)
 80042a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	2200      	movs	r2, #0
 80042a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80042b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3304      	adds	r3, #4
 80042be:	461a      	mov	r2, r3
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	f7fe fde3 	bl	8002e8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	617b      	str	r3, [r7, #20]
   return(result);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80042f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6a39      	ldr	r1, [r7, #32]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	@ 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	080048e5 	.word	0x080048e5
 8004318:	0800497f 	.word	0x0800497f
 800431c:	08004b03 	.word	0x08004b03

08004320 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b20      	cmp	r3, #32
 8004338:	d112      	bne.n	8004360 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_UART_Receive_DMA+0x26>
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e00b      	b.n	8004362 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	461a      	mov	r2, r3
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fc1e 	bl	8004b98 <UART_Start_Receive_DMA>
 800435c:	4603      	mov	r3, r0
 800435e:	e000      	b.n	8004362 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b0ba      	sub	sp, #232	@ 0xe8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_UART_IRQHandler+0x66>
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fd85 	bl	8004eda <UART_Receive_IT>
      return;
 80043d0:	e25b      	b.n	800488a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80de 	beq.w	8004598 <HAL_UART_IRQHandler+0x22c>
 80043dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80d1 	beq.w	8004598 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_UART_IRQHandler+0xae>
 8004402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f043 0201 	orr.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_UART_IRQHandler+0xd2>
 8004426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_UART_IRQHandler+0xf6>
 800444a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	f043 0204 	orr.w	r2, r3, #4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d011      	beq.n	8004492 <HAL_UART_IRQHandler+0x126>
 800446e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800447a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f043 0208 	orr.w	r2, r3, #8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 81f2 	beq.w	8004880 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_UART_IRQHandler+0x14e>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fd10 	bl	8004eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_UART_IRQHandler+0x17a>
 80044de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d04f      	beq.n	8004586 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fc18 	bl	8004d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d141      	bne.n	800457e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004526:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800452a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800453e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1d9      	bne.n	80044fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d013      	beq.n	8004576 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004552:	4a7e      	ldr	r2, [pc, #504]	@ (800474c <HAL_UART_IRQHandler+0x3e0>)
 8004554:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fd5e 	bl	800301c <HAL_DMA_Abort_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004570:	4610      	mov	r0, r2
 8004572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	e00e      	b.n	8004594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f99e 	bl	80048b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	e00a      	b.n	8004594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f99a 	bl	80048b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e006      	b.n	8004594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f996 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004592:	e175      	b.n	8004880 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	bf00      	nop
    return;
 8004596:	e173      	b.n	8004880 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	2b01      	cmp	r3, #1
 800459e:	f040 814f 	bne.w	8004840 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8148 	beq.w	8004840 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8141 	beq.w	8004840 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045de:	2b40      	cmp	r3, #64	@ 0x40
 80045e0:	f040 80b6 	bne.w	8004750 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8145 	beq.w	8004884 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004602:	429a      	cmp	r2, r3
 8004604:	f080 813e 	bcs.w	8004884 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800460e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461a:	f000 8088 	beq.w	800472e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800463c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800464a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800464e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1d9      	bne.n	800461e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3314      	adds	r3, #20
 8004670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800467a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3314      	adds	r3, #20
 800468a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800468e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004692:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e1      	bne.n	800466a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e3      	bne.n	80046a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046fe:	f023 0310 	bic.w	r3, r3, #16
 8004702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004710:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004712:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004716:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800471e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e3      	bne.n	80046ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fc07 	bl	8002f3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8c1 	bl	80048cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800474a:	e09b      	b.n	8004884 <HAL_UART_IRQHandler+0x518>
 800474c:	08004de3 	.word	0x08004de3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 808e 	beq.w	8004888 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800476c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8089 	beq.w	8004888 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800478c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800479a:	647a      	str	r2, [r7, #68]	@ 0x44
 800479c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e3      	bne.n	8004776 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	623b      	str	r3, [r7, #32]
   return(result);
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3314      	adds	r3, #20
 80047ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e3      	bne.n	80047ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	60fb      	str	r3, [r7, #12]
   return(result);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0310 	bic.w	r3, r3, #16
 800480a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004818:	61fa      	str	r2, [r7, #28]
 800481a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	69b9      	ldr	r1, [r7, #24]
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	617b      	str	r3, [r7, #20]
   return(result);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e3      	bne.n	80047f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004832:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f847 	bl	80048cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800483e:	e023      	b.n	8004888 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_UART_IRQHandler+0x4f4>
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fad6 	bl	8004e0a <UART_Transmit_IT>
    return;
 800485e:	e014      	b.n	800488a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <HAL_UART_IRQHandler+0x51e>
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fb16 	bl	8004eaa <UART_EndTransmit_IT>
    return;
 800487e:	e004      	b.n	800488a <HAL_UART_IRQHandler+0x51e>
    return;
 8004880:	bf00      	nop
 8004882:	e002      	b.n	800488a <HAL_UART_IRQHandler+0x51e>
      return;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HAL_UART_IRQHandler+0x51e>
      return;
 8004888:	bf00      	nop
  }
}
 800488a:	37e8      	adds	r7, #232	@ 0xe8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b090      	sub	sp, #64	@ 0x40
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d137      	bne.n	8004970 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004902:	2200      	movs	r2, #0
 8004904:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	623b      	str	r3, [r7, #32]
   return(result);
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800491c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3314      	adds	r3, #20
 8004924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004926:	633a      	str	r2, [r7, #48]	@ 0x30
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800492c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800493a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	60fb      	str	r3, [r7, #12]
   return(result);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004950:	637b      	str	r3, [r7, #52]	@ 0x34
 8004952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800495a:	61fa      	str	r2, [r7, #28]
 800495c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	69b9      	ldr	r1, [r7, #24]
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	617b      	str	r3, [r7, #20]
   return(result);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800496e:	e002      	b.n	8004976 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004970:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004972:	f7fb ff15 	bl	80007a0 <HAL_UART_TxCpltCallback>
}
 8004976:	bf00      	nop
 8004978:	3740      	adds	r7, #64	@ 0x40
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ff7f 	bl	8004890 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b09c      	sub	sp, #112	@ 0x70
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d172      	bne.n	8004a9c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80049b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b8:	2200      	movs	r2, #0
 80049ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80049dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a10:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	623b      	str	r3, [r7, #32]
   return(result);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a44:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d119      	bne.n	8004a9c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a88:	61fa      	str	r2, [r7, #28]
 8004a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	617b      	str	r3, [r7, #20]
   return(result);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d106      	bne.n	8004ab8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ab2:	f7ff ff0b 	bl	80048cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ab6:	e002      	b.n	8004abe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004ab8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004aba:	f7fb fe8d 	bl	80007d8 <HAL_UART_RxCpltCallback>
}
 8004abe:	bf00      	nop
 8004ac0:	3770      	adds	r7, #112	@ 0x70
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d108      	bne.n	8004af4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff feed 	bl	80048cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004af2:	e002      	b.n	8004afa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff fed5 	bl	80048a4 <HAL_UART_RxHalfCpltCallback>
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1e:	2b80      	cmp	r3, #128	@ 0x80
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b21      	cmp	r3, #33	@ 0x21
 8004b34:	d108      	bne.n	8004b48 <UART_DMAError+0x46>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004b42:	68b8      	ldr	r0, [r7, #8]
 8004b44:	f000 f8c2 	bl	8004ccc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b22      	cmp	r3, #34	@ 0x22
 8004b68:	d108      	bne.n	8004b7c <UART_DMAError+0x7a>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2200      	movs	r2, #0
 8004b74:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f000 f8d0 	bl	8004d1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b80:	f043 0210 	orr.w	r2, r3, #16
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b88:	68b8      	ldr	r0, [r7, #8]
 8004b8a:	f7ff fe95 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b098      	sub	sp, #96	@ 0x60
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	@ 0x22
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cc0 <UART_Start_Receive_DMA+0x128>)
 8004bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc4 <UART_Start_Receive_DMA+0x12c>)
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8004cc8 <UART_Start_Receive_DMA+0x130>)
 8004bd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	2200      	movs	r2, #0
 8004bde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004be0:	f107 0308 	add.w	r3, r7, #8
 8004be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	f7fe f948 	bl	8002e8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d019      	beq.n	8004c4e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c3a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c6e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	617b      	str	r3, [r7, #20]
   return(result);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ca2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6a39      	ldr	r1, [r7, #32]
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e5      	bne.n	8004c82 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3760      	adds	r7, #96	@ 0x60
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	0800499b 	.word	0x0800499b
 8004cc4:	08004ac7 	.word	0x08004ac7
 8004cc8:	08004b03 	.word	0x08004b03

08004ccc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	@ 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	61ba      	str	r2, [r7, #24]
 8004cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004d10:	bf00      	nop
 8004d12:	3724      	adds	r7, #36	@ 0x24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b095      	sub	sp, #84	@ 0x54
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d44:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d119      	bne.n	8004dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004db4:	61ba      	str	r2, [r7, #24]
 8004db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e5      	bne.n	8004d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dd6:	bf00      	nop
 8004dd8:	3754      	adds	r7, #84	@ 0x54
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fd5b 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b21      	cmp	r3, #33	@ 0x21
 8004e1c:	d13e      	bne.n	8004e9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e26:	d114      	bne.n	8004e52 <UART_Transmit_IT+0x48>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d110      	bne.n	8004e52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]
 8004e50:	e008      	b.n	8004e64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6211      	str	r1, [r2, #32]
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4619      	mov	r1, r3
 8004e72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10f      	bne.n	8004e98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fb fc68 	bl	80007a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b08c      	sub	sp, #48	@ 0x30
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b22      	cmp	r3, #34	@ 0x22
 8004eec:	f040 80ae 	bne.w	800504c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef8:	d117      	bne.n	8004f2a <UART_Receive_IT+0x50>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d113      	bne.n	8004f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f28:	e026      	b.n	8004f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3c:	d007      	beq.n	8004f4e <UART_Receive_IT+0x74>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <UART_Receive_IT+0x82>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e008      	b.n	8004f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4619      	mov	r1, r3
 8004f86:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d15d      	bne.n	8005048 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0220 	bic.w	r2, r2, #32
 8004f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d135      	bne.n	800503e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff8:	623a      	str	r2, [r7, #32]
 8004ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	69f9      	ldr	r1, [r7, #28]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	61bb      	str	r3, [r7, #24]
   return(result);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	d10a      	bne.n	8005030 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fc48 	bl	80048cc <HAL_UARTEx_RxEventCallback>
 800503c:	e002      	b.n	8005044 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fb fbca 	bl	80007d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e002      	b.n	800504e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3730      	adds	r7, #48	@ 0x30
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b0c0      	sub	sp, #256	@ 0x100
 800505e:	af00      	add	r7, sp, #0
 8005060:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	ea40 0301 	orr.w	r3, r0, r1
 8005080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050b0:	f021 010c 	bic.w	r1, r1, #12
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050be:	430b      	orrs	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	6999      	ldr	r1, [r3, #24]
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	ea40 0301 	orr.w	r3, r0, r1
 80050de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005324 <UART_SetConfig+0x2cc>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d005      	beq.n	80050f8 <UART_SetConfig+0xa0>
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005328 <UART_SetConfig+0x2d0>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d104      	bne.n	8005102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7ff f83e 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 80050fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005100:	e003      	b.n	800510a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005102:	f7ff f825 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8005106:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005114:	f040 810c 	bne.w	8005330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511c:	2200      	movs	r2, #0
 800511e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005122:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	1891      	adds	r1, r2, r2
 8005130:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005132:	415b      	adcs	r3, r3
 8005134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800513a:	4621      	mov	r1, r4
 800513c:	eb12 0801 	adds.w	r8, r2, r1
 8005140:	4629      	mov	r1, r5
 8005142:	eb43 0901 	adc.w	r9, r3, r1
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800515a:	4690      	mov	r8, r2
 800515c:	4699      	mov	r9, r3
 800515e:	4623      	mov	r3, r4
 8005160:	eb18 0303 	adds.w	r3, r8, r3
 8005164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005168:	462b      	mov	r3, r5
 800516a:	eb49 0303 	adc.w	r3, r9, r3
 800516e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800517e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005186:	460b      	mov	r3, r1
 8005188:	18db      	adds	r3, r3, r3
 800518a:	653b      	str	r3, [r7, #80]	@ 0x50
 800518c:	4613      	mov	r3, r2
 800518e:	eb42 0303 	adc.w	r3, r2, r3
 8005192:	657b      	str	r3, [r7, #84]	@ 0x54
 8005194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800519c:	f7fb f824 	bl	80001e8 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4b61      	ldr	r3, [pc, #388]	@ (800532c <UART_SetConfig+0x2d4>)
 80051a6:	fba3 2302 	umull	r2, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	011c      	lsls	r4, r3, #4
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051c8:	415b      	adcs	r3, r3
 80051ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051d0:	4641      	mov	r1, r8
 80051d2:	eb12 0a01 	adds.w	sl, r2, r1
 80051d6:	4649      	mov	r1, r9
 80051d8:	eb43 0b01 	adc.w	fp, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f0:	4692      	mov	sl, r2
 80051f2:	469b      	mov	fp, r3
 80051f4:	4643      	mov	r3, r8
 80051f6:	eb1a 0303 	adds.w	r3, sl, r3
 80051fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051fe:	464b      	mov	r3, r9
 8005200:	eb4b 0303 	adc.w	r3, fp, r3
 8005204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005214:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800521c:	460b      	mov	r3, r1
 800521e:	18db      	adds	r3, r3, r3
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	4613      	mov	r3, r2
 8005224:	eb42 0303 	adc.w	r3, r2, r3
 8005228:	647b      	str	r3, [r7, #68]	@ 0x44
 800522a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800522e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005232:	f7fa ffd9 	bl	80001e8 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4611      	mov	r1, r2
 800523c:	4b3b      	ldr	r3, [pc, #236]	@ (800532c <UART_SetConfig+0x2d4>)
 800523e:	fba3 2301 	umull	r2, r3, r3, r1
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2264      	movs	r2, #100	@ 0x64
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	1acb      	subs	r3, r1, r3
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005252:	4b36      	ldr	r3, [pc, #216]	@ (800532c <UART_SetConfig+0x2d4>)
 8005254:	fba3 2302 	umull	r2, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005260:	441c      	add	r4, r3
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800526c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	1891      	adds	r1, r2, r2
 800527a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800527c:	415b      	adcs	r3, r3
 800527e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005284:	4641      	mov	r1, r8
 8005286:	1851      	adds	r1, r2, r1
 8005288:	6339      	str	r1, [r7, #48]	@ 0x30
 800528a:	4649      	mov	r1, r9
 800528c:	414b      	adcs	r3, r1
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800529c:	4659      	mov	r1, fp
 800529e:	00cb      	lsls	r3, r1, #3
 80052a0:	4651      	mov	r1, sl
 80052a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a6:	4651      	mov	r1, sl
 80052a8:	00ca      	lsls	r2, r1, #3
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	4642      	mov	r2, r8
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b8:	464b      	mov	r3, r9
 80052ba:	460a      	mov	r2, r1
 80052bc:	eb42 0303 	adc.w	r3, r2, r3
 80052c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052d8:	460b      	mov	r3, r1
 80052da:	18db      	adds	r3, r3, r3
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052de:	4613      	mov	r3, r2
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052ee:	f7fa ff7b 	bl	80001e8 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <UART_SetConfig+0x2d4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	@ 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	@ 0x32
 800530a:	4a08      	ldr	r2, [pc, #32]	@ (800532c <UART_SetConfig+0x2d4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4422      	add	r2, r4
 800531e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005320:	e106      	b.n	8005530 <UART_SetConfig+0x4d8>
 8005322:	bf00      	nop
 8005324:	40011000 	.word	0x40011000
 8005328:	40011400 	.word	0x40011400
 800532c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800533a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800533e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005342:	4642      	mov	r2, r8
 8005344:	464b      	mov	r3, r9
 8005346:	1891      	adds	r1, r2, r2
 8005348:	6239      	str	r1, [r7, #32]
 800534a:	415b      	adcs	r3, r3
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
 800534e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005352:	4641      	mov	r1, r8
 8005354:	1854      	adds	r4, r2, r1
 8005356:	4649      	mov	r1, r9
 8005358:	eb43 0501 	adc.w	r5, r3, r1
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	00eb      	lsls	r3, r5, #3
 8005366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536a:	00e2      	lsls	r2, r4, #3
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	4643      	mov	r3, r8
 8005372:	18e3      	adds	r3, r4, r3
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005378:	464b      	mov	r3, r9
 800537a:	eb45 0303 	adc.w	r3, r5, r3
 800537e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800538e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800539e:	4629      	mov	r1, r5
 80053a0:	008b      	lsls	r3, r1, #2
 80053a2:	4621      	mov	r1, r4
 80053a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a8:	4621      	mov	r1, r4
 80053aa:	008a      	lsls	r2, r1, #2
 80053ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053b0:	f7fa ff1a 	bl	80001e8 <__aeabi_uldivmod>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4b60      	ldr	r3, [pc, #384]	@ (800553c <UART_SetConfig+0x4e4>)
 80053ba:	fba3 2302 	umull	r2, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	011c      	lsls	r4, r3, #4
 80053c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053d4:	4642      	mov	r2, r8
 80053d6:	464b      	mov	r3, r9
 80053d8:	1891      	adds	r1, r2, r2
 80053da:	61b9      	str	r1, [r7, #24]
 80053dc:	415b      	adcs	r3, r3
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e4:	4641      	mov	r1, r8
 80053e6:	1851      	adds	r1, r2, r1
 80053e8:	6139      	str	r1, [r7, #16]
 80053ea:	4649      	mov	r1, r9
 80053ec:	414b      	adcs	r3, r1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053fc:	4659      	mov	r1, fp
 80053fe:	00cb      	lsls	r3, r1, #3
 8005400:	4651      	mov	r1, sl
 8005402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005406:	4651      	mov	r1, sl
 8005408:	00ca      	lsls	r2, r1, #3
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	4603      	mov	r3, r0
 8005410:	4642      	mov	r2, r8
 8005412:	189b      	adds	r3, r3, r2
 8005414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005418:	464b      	mov	r3, r9
 800541a:	460a      	mov	r2, r1
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800542e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800543c:	4649      	mov	r1, r9
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	4641      	mov	r1, r8
 8005442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005446:	4641      	mov	r1, r8
 8005448:	008a      	lsls	r2, r1, #2
 800544a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800544e:	f7fa fecb 	bl	80001e8 <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4611      	mov	r1, r2
 8005458:	4b38      	ldr	r3, [pc, #224]	@ (800553c <UART_SetConfig+0x4e4>)
 800545a:	fba3 2301 	umull	r2, r3, r3, r1
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	2264      	movs	r2, #100	@ 0x64
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	1acb      	subs	r3, r1, r3
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	3332      	adds	r3, #50	@ 0x32
 800546c:	4a33      	ldr	r2, [pc, #204]	@ (800553c <UART_SetConfig+0x4e4>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005478:	441c      	add	r4, r3
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	673b      	str	r3, [r7, #112]	@ 0x70
 8005482:	677a      	str	r2, [r7, #116]	@ 0x74
 8005484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	1891      	adds	r1, r2, r2
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	415b      	adcs	r3, r3
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005498:	4641      	mov	r1, r8
 800549a:	1851      	adds	r1, r2, r1
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	4649      	mov	r1, r9
 80054a0:	414b      	adcs	r3, r1
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054b0:	4659      	mov	r1, fp
 80054b2:	00cb      	lsls	r3, r1, #3
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ba:	4651      	mov	r1, sl
 80054bc:	00ca      	lsls	r2, r1, #3
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	4642      	mov	r2, r8
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ca:	464b      	mov	r3, r9
 80054cc:	460a      	mov	r2, r1
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80054de:	667a      	str	r2, [r7, #100]	@ 0x64
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054ec:	4649      	mov	r1, r9
 80054ee:	008b      	lsls	r3, r1, #2
 80054f0:	4641      	mov	r1, r8
 80054f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f6:	4641      	mov	r1, r8
 80054f8:	008a      	lsls	r2, r1, #2
 80054fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054fe:	f7fa fe73 	bl	80001e8 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <UART_SetConfig+0x4e4>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	@ 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	@ 0x32
 800551a:	4a08      	ldr	r2, [pc, #32]	@ (800553c <UART_SetConfig+0x4e4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4422      	add	r2, r4
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553c:	51eb851f 	.word	0x51eb851f

08005540 <realloc>:
 8005540:	4b02      	ldr	r3, [pc, #8]	@ (800554c <realloc+0xc>)
 8005542:	460a      	mov	r2, r1
 8005544:	4601      	mov	r1, r0
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	f000 b802 	b.w	8005550 <_realloc_r>
 800554c:	2000001c 	.word	0x2000001c

08005550 <_realloc_r>:
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	4680      	mov	r8, r0
 8005556:	4615      	mov	r5, r2
 8005558:	460c      	mov	r4, r1
 800555a:	b921      	cbnz	r1, 8005566 <_realloc_r+0x16>
 800555c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	4611      	mov	r1, r2
 8005562:	f000 b8d1 	b.w	8005708 <_malloc_r>
 8005566:	b92a      	cbnz	r2, 8005574 <_realloc_r+0x24>
 8005568:	f000 f862 	bl	8005630 <_free_r>
 800556c:	2400      	movs	r4, #0
 800556e:	4620      	mov	r0, r4
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	f000 f954 	bl	8005820 <_malloc_usable_size_r>
 8005578:	4285      	cmp	r5, r0
 800557a:	4606      	mov	r6, r0
 800557c:	d802      	bhi.n	8005584 <_realloc_r+0x34>
 800557e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005582:	d8f4      	bhi.n	800556e <_realloc_r+0x1e>
 8005584:	4629      	mov	r1, r5
 8005586:	4640      	mov	r0, r8
 8005588:	f000 f8be 	bl	8005708 <_malloc_r>
 800558c:	4607      	mov	r7, r0
 800558e:	2800      	cmp	r0, #0
 8005590:	d0ec      	beq.n	800556c <_realloc_r+0x1c>
 8005592:	42b5      	cmp	r5, r6
 8005594:	462a      	mov	r2, r5
 8005596:	4621      	mov	r1, r4
 8005598:	bf28      	it	cs
 800559a:	4632      	movcs	r2, r6
 800559c:	f000 f83a 	bl	8005614 <memcpy>
 80055a0:	4621      	mov	r1, r4
 80055a2:	4640      	mov	r0, r8
 80055a4:	f000 f844 	bl	8005630 <_free_r>
 80055a8:	463c      	mov	r4, r7
 80055aa:	e7e0      	b.n	800556e <_realloc_r+0x1e>

080055ac <memset>:
 80055ac:	4402      	add	r2, r0
 80055ae:	4603      	mov	r3, r0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d100      	bne.n	80055b6 <memset+0xa>
 80055b4:	4770      	bx	lr
 80055b6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ba:	e7f9      	b.n	80055b0 <memset+0x4>

080055bc <__errno>:
 80055bc:	4b01      	ldr	r3, [pc, #4]	@ (80055c4 <__errno+0x8>)
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	2000001c 	.word	0x2000001c

080055c8 <__libc_init_array>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005600 <__libc_init_array+0x38>)
 80055cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005604 <__libc_init_array+0x3c>)
 80055ce:	1b64      	subs	r4, r4, r5
 80055d0:	10a4      	asrs	r4, r4, #2
 80055d2:	2600      	movs	r6, #0
 80055d4:	42a6      	cmp	r6, r4
 80055d6:	d109      	bne.n	80055ec <__libc_init_array+0x24>
 80055d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005608 <__libc_init_array+0x40>)
 80055da:	4c0c      	ldr	r4, [pc, #48]	@ (800560c <__libc_init_array+0x44>)
 80055dc:	f000 f938 	bl	8005850 <_init>
 80055e0:	1b64      	subs	r4, r4, r5
 80055e2:	10a4      	asrs	r4, r4, #2
 80055e4:	2600      	movs	r6, #0
 80055e6:	42a6      	cmp	r6, r4
 80055e8:	d105      	bne.n	80055f6 <__libc_init_array+0x2e>
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f0:	4798      	blx	r3
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7ee      	b.n	80055d4 <__libc_init_array+0xc>
 80055f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fa:	4798      	blx	r3
 80055fc:	3601      	adds	r6, #1
 80055fe:	e7f2      	b.n	80055e6 <__libc_init_array+0x1e>
 8005600:	08005b38 	.word	0x08005b38
 8005604:	08005b38 	.word	0x08005b38
 8005608:	08005b38 	.word	0x08005b38
 800560c:	08005b44 	.word	0x08005b44

08005610 <__retarget_lock_acquire_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_release_recursive>:
 8005612:	4770      	bx	lr

08005614 <memcpy>:
 8005614:	440a      	add	r2, r1
 8005616:	4291      	cmp	r1, r2
 8005618:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800561c:	d100      	bne.n	8005620 <memcpy+0xc>
 800561e:	4770      	bx	lr
 8005620:	b510      	push	{r4, lr}
 8005622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562a:	4291      	cmp	r1, r2
 800562c:	d1f9      	bne.n	8005622 <memcpy+0xe>
 800562e:	bd10      	pop	{r4, pc}

08005630 <_free_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4605      	mov	r5, r0
 8005634:	2900      	cmp	r1, #0
 8005636:	d041      	beq.n	80056bc <_free_r+0x8c>
 8005638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563c:	1f0c      	subs	r4, r1, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	bfb8      	it	lt
 8005642:	18e4      	addlt	r4, r4, r3
 8005644:	f000 f8e0 	bl	8005808 <__malloc_lock>
 8005648:	4a1d      	ldr	r2, [pc, #116]	@ (80056c0 <_free_r+0x90>)
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	b933      	cbnz	r3, 800565c <_free_r+0x2c>
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	6014      	str	r4, [r2, #0]
 8005652:	4628      	mov	r0, r5
 8005654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005658:	f000 b8dc 	b.w	8005814 <__malloc_unlock>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d908      	bls.n	8005672 <_free_r+0x42>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	1821      	adds	r1, r4, r0
 8005664:	428b      	cmp	r3, r1
 8005666:	bf01      	itttt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	1809      	addeq	r1, r1, r0
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	e7ed      	b.n	800564e <_free_r+0x1e>
 8005672:	461a      	mov	r2, r3
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b10b      	cbz	r3, 800567c <_free_r+0x4c>
 8005678:	42a3      	cmp	r3, r4
 800567a:	d9fa      	bls.n	8005672 <_free_r+0x42>
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	1850      	adds	r0, r2, r1
 8005680:	42a0      	cmp	r0, r4
 8005682:	d10b      	bne.n	800569c <_free_r+0x6c>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	4401      	add	r1, r0
 8005688:	1850      	adds	r0, r2, r1
 800568a:	4283      	cmp	r3, r0
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	d1e0      	bne.n	8005652 <_free_r+0x22>
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	6053      	str	r3, [r2, #4]
 8005696:	4408      	add	r0, r1
 8005698:	6010      	str	r0, [r2, #0]
 800569a:	e7da      	b.n	8005652 <_free_r+0x22>
 800569c:	d902      	bls.n	80056a4 <_free_r+0x74>
 800569e:	230c      	movs	r3, #12
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	e7d6      	b.n	8005652 <_free_r+0x22>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	1821      	adds	r1, r4, r0
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf04      	itt	eq
 80056ac:	6819      	ldreq	r1, [r3, #0]
 80056ae:	685b      	ldreq	r3, [r3, #4]
 80056b0:	6063      	str	r3, [r4, #4]
 80056b2:	bf04      	itt	eq
 80056b4:	1809      	addeq	r1, r1, r0
 80056b6:	6021      	streq	r1, [r4, #0]
 80056b8:	6054      	str	r4, [r2, #4]
 80056ba:	e7ca      	b.n	8005652 <_free_r+0x22>
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
 80056be:	bf00      	nop
 80056c0:	20000c50 	.word	0x20000c50

080056c4 <sbrk_aligned>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005704 <sbrk_aligned+0x40>)
 80056c8:	460c      	mov	r4, r1
 80056ca:	6831      	ldr	r1, [r6, #0]
 80056cc:	4605      	mov	r5, r0
 80056ce:	b911      	cbnz	r1, 80056d6 <sbrk_aligned+0x12>
 80056d0:	f000 f8ae 	bl	8005830 <_sbrk_r>
 80056d4:	6030      	str	r0, [r6, #0]
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f8a9 	bl	8005830 <_sbrk_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d103      	bne.n	80056ea <sbrk_aligned+0x26>
 80056e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80056e6:	4620      	mov	r0, r4
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
 80056ea:	1cc4      	adds	r4, r0, #3
 80056ec:	f024 0403 	bic.w	r4, r4, #3
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d0f8      	beq.n	80056e6 <sbrk_aligned+0x22>
 80056f4:	1a21      	subs	r1, r4, r0
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f89a 	bl	8005830 <_sbrk_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1f2      	bne.n	80056e6 <sbrk_aligned+0x22>
 8005700:	e7ef      	b.n	80056e2 <sbrk_aligned+0x1e>
 8005702:	bf00      	nop
 8005704:	20000c4c 	.word	0x20000c4c

08005708 <_malloc_r>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	1ccd      	adds	r5, r1, #3
 800570e:	f025 0503 	bic.w	r5, r5, #3
 8005712:	3508      	adds	r5, #8
 8005714:	2d0c      	cmp	r5, #12
 8005716:	bf38      	it	cc
 8005718:	250c      	movcc	r5, #12
 800571a:	2d00      	cmp	r5, #0
 800571c:	4606      	mov	r6, r0
 800571e:	db01      	blt.n	8005724 <_malloc_r+0x1c>
 8005720:	42a9      	cmp	r1, r5
 8005722:	d904      	bls.n	800572e <_malloc_r+0x26>
 8005724:	230c      	movs	r3, #12
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	2000      	movs	r0, #0
 800572a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005804 <_malloc_r+0xfc>
 8005732:	f000 f869 	bl	8005808 <__malloc_lock>
 8005736:	f8d8 3000 	ldr.w	r3, [r8]
 800573a:	461c      	mov	r4, r3
 800573c:	bb44      	cbnz	r4, 8005790 <_malloc_r+0x88>
 800573e:	4629      	mov	r1, r5
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff ffbf 	bl	80056c4 <sbrk_aligned>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	4604      	mov	r4, r0
 800574a:	d158      	bne.n	80057fe <_malloc_r+0xf6>
 800574c:	f8d8 4000 	ldr.w	r4, [r8]
 8005750:	4627      	mov	r7, r4
 8005752:	2f00      	cmp	r7, #0
 8005754:	d143      	bne.n	80057de <_malloc_r+0xd6>
 8005756:	2c00      	cmp	r4, #0
 8005758:	d04b      	beq.n	80057f2 <_malloc_r+0xea>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4639      	mov	r1, r7
 800575e:	4630      	mov	r0, r6
 8005760:	eb04 0903 	add.w	r9, r4, r3
 8005764:	f000 f864 	bl	8005830 <_sbrk_r>
 8005768:	4581      	cmp	r9, r0
 800576a:	d142      	bne.n	80057f2 <_malloc_r+0xea>
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	1a6d      	subs	r5, r5, r1
 8005770:	4629      	mov	r1, r5
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff ffa6 	bl	80056c4 <sbrk_aligned>
 8005778:	3001      	adds	r0, #1
 800577a:	d03a      	beq.n	80057f2 <_malloc_r+0xea>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	442b      	add	r3, r5
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	f8d8 3000 	ldr.w	r3, [r8]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	bb62      	cbnz	r2, 80057e4 <_malloc_r+0xdc>
 800578a:	f8c8 7000 	str.w	r7, [r8]
 800578e:	e00f      	b.n	80057b0 <_malloc_r+0xa8>
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	1b52      	subs	r2, r2, r5
 8005794:	d420      	bmi.n	80057d8 <_malloc_r+0xd0>
 8005796:	2a0b      	cmp	r2, #11
 8005798:	d917      	bls.n	80057ca <_malloc_r+0xc2>
 800579a:	1961      	adds	r1, r4, r5
 800579c:	42a3      	cmp	r3, r4
 800579e:	6025      	str	r5, [r4, #0]
 80057a0:	bf18      	it	ne
 80057a2:	6059      	strne	r1, [r3, #4]
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	bf08      	it	eq
 80057a8:	f8c8 1000 	streq.w	r1, [r8]
 80057ac:	5162      	str	r2, [r4, r5]
 80057ae:	604b      	str	r3, [r1, #4]
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 f82f 	bl	8005814 <__malloc_unlock>
 80057b6:	f104 000b 	add.w	r0, r4, #11
 80057ba:	1d23      	adds	r3, r4, #4
 80057bc:	f020 0007 	bic.w	r0, r0, #7
 80057c0:	1ac2      	subs	r2, r0, r3
 80057c2:	bf1c      	itt	ne
 80057c4:	1a1b      	subne	r3, r3, r0
 80057c6:	50a3      	strne	r3, [r4, r2]
 80057c8:	e7af      	b.n	800572a <_malloc_r+0x22>
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	bf0c      	ite	eq
 80057d0:	f8c8 2000 	streq.w	r2, [r8]
 80057d4:	605a      	strne	r2, [r3, #4]
 80057d6:	e7eb      	b.n	80057b0 <_malloc_r+0xa8>
 80057d8:	4623      	mov	r3, r4
 80057da:	6864      	ldr	r4, [r4, #4]
 80057dc:	e7ae      	b.n	800573c <_malloc_r+0x34>
 80057de:	463c      	mov	r4, r7
 80057e0:	687f      	ldr	r7, [r7, #4]
 80057e2:	e7b6      	b.n	8005752 <_malloc_r+0x4a>
 80057e4:	461a      	mov	r2, r3
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d1fb      	bne.n	80057e4 <_malloc_r+0xdc>
 80057ec:	2300      	movs	r3, #0
 80057ee:	6053      	str	r3, [r2, #4]
 80057f0:	e7de      	b.n	80057b0 <_malloc_r+0xa8>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6033      	str	r3, [r6, #0]
 80057f6:	4630      	mov	r0, r6
 80057f8:	f000 f80c 	bl	8005814 <__malloc_unlock>
 80057fc:	e794      	b.n	8005728 <_malloc_r+0x20>
 80057fe:	6005      	str	r5, [r0, #0]
 8005800:	e7d6      	b.n	80057b0 <_malloc_r+0xa8>
 8005802:	bf00      	nop
 8005804:	20000c50 	.word	0x20000c50

08005808 <__malloc_lock>:
 8005808:	4801      	ldr	r0, [pc, #4]	@ (8005810 <__malloc_lock+0x8>)
 800580a:	f7ff bf01 	b.w	8005610 <__retarget_lock_acquire_recursive>
 800580e:	bf00      	nop
 8005810:	20000c48 	.word	0x20000c48

08005814 <__malloc_unlock>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__malloc_unlock+0x8>)
 8005816:	f7ff befc 	b.w	8005612 <__retarget_lock_release_recursive>
 800581a:	bf00      	nop
 800581c:	20000c48 	.word	0x20000c48

08005820 <_malloc_usable_size_r>:
 8005820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005824:	1f18      	subs	r0, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfbc      	itt	lt
 800582a:	580b      	ldrlt	r3, [r1, r0]
 800582c:	18c0      	addlt	r0, r0, r3
 800582e:	4770      	bx	lr

08005830 <_sbrk_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	@ (800584c <_sbrk_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fd f832 	bl	80028a4 <_sbrk>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_sbrk_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_sbrk_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000c44 	.word	0x20000c44

08005850 <_init>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr

0800585c <_fini>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr
